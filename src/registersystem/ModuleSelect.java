/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package registersystem;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import org.hibernate.HibernateException;
import sessions.SessionCreate;

/**
 *
 * @author Akshai
 */
public class ModuleSelect extends javax.swing.JDialog {

    public static String selectedid = "", selectedname = "";

    public ModuleSelect() {
        initComponents();
        System.out.println("module select---> ");
        checkmodulestatus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ip = new javax.swing.JCheckBox();
        hr = new javax.swing.JCheckBox();
        op = new javax.swing.JCheckBox();
        lab = new javax.swing.JCheckBox();
        inventory = new javax.swing.JCheckBox();
        pharmacy = new javax.swing.JCheckBox();
        bb = new javax.swing.JCheckBox();
        pc = new javax.swing.JCheckBox();
        triage = new javax.swing.JCheckBox();
        fo = new javax.swing.JCheckBox();
        hk = new javax.swing.JCheckBox();
        wm = new javax.swing.JCheckBox();
        as = new javax.swing.JCheckBox();
        serviceorder = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Light", 0, 30)); // NOI18N
        jLabel1.setText("Modules");

        ip.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        ip.setText("IP");

        hr.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        hr.setText("HR");

        op.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        op.setText("OP");

        lab.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        lab.setText("LAB");

        inventory.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        inventory.setText("Inventory");

        pharmacy.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        pharmacy.setText("Pharmacy");

        bb.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        bb.setText("Blood Bank");

        pc.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        pc.setText("Patient Care");

        triage.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        triage.setText("Triage");

        fo.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        fo.setText("Front Office");

        hk.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        hk.setText("House Keeping");

        wm.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        wm.setText("Ward Management");

        as.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        as.setText("Appointment Scheduling");

        serviceorder.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        serviceorder.setText("Service Order");

        jButton1.setBackground(new java.awt.Color(0, 153, 153));
        jButton1.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jButton1.setText("Confirm Selection");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hr)
                    .addComponent(ip)
                    .addComponent(inventory)
                    .addComponent(pharmacy)
                    .addComponent(op)
                    .addComponent(jLabel1)
                    .addComponent(lab)
                    .addComponent(triage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bb)
                            .addComponent(fo)
                            .addComponent(pc))
                        .addGap(84, 84, 84))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(wm)
                            .addComponent(hk)
                            .addComponent(as))
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(serviceorder)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(144, 144, 144))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(ip)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hr)
                            .addComponent(pc)))
                    .addComponent(bb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(op)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(fo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lab)
                                    .addComponent(serviceorder))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(triage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inventory)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pharmacy))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(hk)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(wm)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(as)))))
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ondispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        ondispose();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox as;
    private javax.swing.JCheckBox bb;
    private javax.swing.JCheckBox fo;
    private javax.swing.JCheckBox hk;
    private javax.swing.JCheckBox hr;
    private javax.swing.JCheckBox inventory;
    private javax.swing.JCheckBox ip;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JCheckBox lab;
    private javax.swing.JCheckBox op;
    private javax.swing.JCheckBox pc;
    private javax.swing.JCheckBox pharmacy;
    private javax.swing.JCheckBox serviceorder;
    private javax.swing.JCheckBox triage;
    private javax.swing.JCheckBox wm;
    // End of variables declaration//GEN-END:variables

    private void checkmodulestatus() {
        SessionCreate.adminses1 = SessionCreate.factory.openSession();
        try {
            SessionCreate.adminses1.beginTransaction();
            String hql = "FROM APP_MODULESPOJO";
            org.hibernate.Query query = SessionCreate.adminses1.createQuery(hql);
            List l = query.list();
            if (l.size() >= 1) {
                for (Iterator iterator = query.iterate(); iterator.hasNext();) {
                    APP_MODULESPOJO asp = (APP_MODULESPOJO) iterator.next();
                    System.out.println("cm---> " + asp.getMODULEID());
                    setcheckboxes(asp.getMODULEID(), asp.getENABLED());
                }
            } else {
                JOptionPane.showMessageDialog(null, "No modules defined. \n Contact admin.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            SessionCreate.adminses1.getTransaction().commit();
        } catch (HibernateException e) {
            if (SessionCreate.adminses1.getTransaction() != null) {
                SessionCreate.adminses1.getTransaction().rollback();
                System.out.println("hmmmm....");
            }
            JOptionPane.showMessageDialog(null, "Error:-" + e, "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } finally {
            SessionCreate.adminses1.close();
        }
    }

    private void setcheckboxes(int i, char stat) {
        System.out.println("cb---> " + i);
        switch (i) {
            case 2: {
                if (stat == 'Y') {
                    ip.setEnabled(true);
                } else {
                    ip.setEnabled(false);
                }
            }
            break;
            case 3: {
                if (stat == 'Y') {
                    op.setEnabled(true);
                } else {
                    op.setEnabled(false);
                }
            }
            break;
            case 4: {
                if (stat == 'Y') {
                    hr.setEnabled(true);
                } else {
                    hr.setEnabled(false);
                }
            }
            break;
            case 5: {
                if (stat == 'Y') {
                    lab.setEnabled(true);
                } else {
                    lab.setEnabled(false);
                }
            }
            break;
            case 7: {
                if (stat == 'Y') {
                    inventory.setEnabled(true);
                } else {
                    inventory.setEnabled(false);
                }
            }
            break;
            case 8: {
                if (stat == 'Y') {
                    pharmacy.setEnabled(true);
                } else {
                    pharmacy.setEnabled(false);
                }
            }
            break;
            case 9: {
                if (stat == 'Y') {
                    bb.setEnabled(true);
                } else {
                    bb.setEnabled(false);
                }
            }
            break;
            case 10: {
                if (stat == 'Y') {
                    pc.setEnabled(true);
                } else {
                    pc.setEnabled(false);
                }
            }
            break;
            case 11: {
                if (stat == 'Y') {
                    fo.setEnabled(true);
                } else {
                    fo.setEnabled(false);
                }
            }
            break;
            case 12: {
                if (stat == 'Y') {
                    triage.setEnabled(true);
                } else {
                    triage.setEnabled(false);
                }
            }
            break;
            case 13: {
                if (stat == 'Y') {
                    hk.setEnabled(true);
                } else {
                    hk.setEnabled(false);
                }
            }
            break;
            case 14: {
                if (stat == 'Y') {
                    wm.setEnabled(true);
                } else {
                    wm.setEnabled(false);
                }
            }
            break;
            case 15: {
                if (stat == 'Y') {
                    as.setEnabled(true);
                } else {
                    as.setEnabled(false);
                }
            }
            break;
            case 16: {
                if (stat == 'Y') {
                    serviceorder.setEnabled(true);
                } else {
                    serviceorder.setEnabled(false);
                }
            }
            break;
        }
    }

    private void ondispose() {
        selectedid = "";
        if (ip.isSelected()) {
            if (selectedid.trim().isEmpty()) {
                selectedid = "2";
                selectedname = "IP";
            } else {
                selectedid = selectedid + ",2";
                selectedname = selectedname + "/IP";
            }
        }
        if (hr.isSelected()) {
            if (selectedid.trim().isEmpty()) {
                selectedid = "4";
                selectedname = "HR";
            } else {
                selectedid = selectedid + ",4";
                selectedname = selectedname + "/HR";
            }
        }
        if (op.isSelected()) {
            if (selectedid.trim().isEmpty()) {
                selectedid = "3";
                selectedname = "OP";
            } else {
                selectedid = selectedid + ",3";
                selectedname = selectedname + "/OP";
            }
        }
        if (lab.isSelected()) {
            if (selectedid.trim().isEmpty()) {
                selectedid = "5";
                selectedname = "LAB";
            } else {
                selectedid = selectedid + ",5";
                selectedname = selectedname + "/LAB";
            }
        }
        if (triage.isSelected()) {
            if (selectedid.trim().isEmpty()) {
                selectedid = "12";
                selectedname = "Triage";
            } else {
                selectedid = selectedid + ",12";
                selectedname = selectedname + "/Triage";
            }
        }
        if (inventory.isSelected()) {
            if (selectedid.trim().isEmpty()) {
                selectedid = "7";
                selectedname = "Inventory";
            } else {
                selectedid = selectedid + ",7";
                selectedname = selectedname + "/Inventory";
            }
        }
        if (pharmacy.isSelected()) {
            if (selectedid.trim().isEmpty()) {
                selectedid = "8";
                selectedname = "Pharmacy";
            } else {
                selectedid = selectedid + ",8";
                selectedname = selectedname + "/Pharmacy";
            }
        }
        if (bb.isSelected()) {
            if (selectedid.trim().isEmpty()) {
                selectedid = "9";
                selectedname = "Blood Bank";
            } else {
                selectedid = selectedid + ",9";
                selectedname = selectedname + "/Blood Bank";
            }
        }
        if (pc.isSelected()) {
            if (selectedid.trim().isEmpty()) {
                selectedid = "10";
                selectedname = "Patient Care";
            } else {
                selectedid = selectedid + ",10";
                selectedname = selectedname + "/Patient Care";
            }
        }
        if (fo.isSelected()) {
            if (selectedid.trim().isEmpty()) {
                selectedid = "11";
                selectedname = "Front Office";
            } else {
                selectedid = selectedid + ",11";
                selectedname = selectedname + "/Front Office";
            }
        }
        if (serviceorder.isSelected()) {
            if (selectedid.trim().isEmpty()) {
                selectedid = "16";
                selectedname = "Service Order";
            } else {
                selectedid = selectedid + ",16";
                selectedname = selectedname + "/Service Order";
            }
        }
        if (hk.isSelected()) {
            if (selectedid.trim().isEmpty()) {
                selectedid = "13";
                selectedname = "House Keeping";
            } else {
                selectedid = selectedid + ",13";
                selectedname = selectedname + "/House Keeping";
            }
        }
        if (wm.isSelected()) {
            if (selectedid.trim().isEmpty()) {
                selectedid = "14";
                selectedname = "Ward Management";
            } else {
                selectedid = selectedid + ",14";
                selectedname = selectedname + "/Ward Management";
            }
        }
        if (as.isSelected()) {
            if (selectedid.trim().isEmpty()) {
                selectedid = "15";
                selectedname = "Appointment Scheduling";
            } else {
                selectedid = selectedid + ",15";
                selectedname = selectedname + "/Appointment Scheduling";
            }
        }
        dispose();
    }
}
